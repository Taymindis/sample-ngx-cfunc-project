
user root;
worker_processes 1;

error_log /etc/nginx/logs/error.log debug;
#error_log  /etc/nginx/logs/error.log  notice;
#error_log  /etc/nginx/logs/error.log  info;

#pid        /etc/nginx/logs/nginx.pid;

events {

  worker_connections 1024;
}


http {

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user - [$time_local] "$request" ' '$status $body_bytes_sent "$host" ' '"$http_user_agent" "$http_x_forwarded_for" "$http_referer" ' '$upstream_cache_status $request_time $upstream_response_time $scheme';

  access_log /etc/nginx/logs/access.log main;

  sendfile on;

  # send headers in one peace, its better then sending them one by one
  tcp_nopush on;

  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay on;

  #keepalive_timeout  0;
  reset_timedout_connection on;

  # request timed out -- default 60
  client_body_timeout 10;

  # if client stop responding, free up memory -- default 60
  send_timeout 2;

  # server will close connection after this time -- default 75
  keepalive_timeout 30;

  # number of requests client can make over keep-alive -- for testing environment
  #keepalive_requests 100000;

  # reduce the data that needs to be sent over network -- for testing environment
  gzip on;
  gzip_min_length 10240;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;
  gzip_disable msie6;


  #gzip  on;
  #include /etc/nginx/conf.d/*.conf;
  proxy_cache_path /var/cache/proxycache levels=1:2 keys_zone=nginxgooglecache:10m inactive=1m max_size=64m;
  proxy_cache_key $scheme$request_method$host$request_uri;
  # note: can also use HTTP headers to form the cache key, e.g.
  #proxy_cache_key $scheme$request_method$host$request_uri$http_x_custom_header;
  proxy_cache_lock on;
  proxy_cache_use_stale error timeout invalid_header updating http_500;
  proxy_cache_valid 10s;
  proxy_ignore_headers Cache-Control Expires Set-Cookie;


  # for load balancer
  upstream nginxGglDirectionUpstream {

    zone my_upstream 64k;
    server 127.0.0.1:7171;
    #server 127.0.0.1:7272;
  }

  server {

    listen 7171;
    client_max_body_size 50m;
    client_body_buffer_size 50m;

    ngx_http_c_func_link_lib '/etc/nginx/apps/libgglDirection.so';


    location /ggl-direction/getRoute {

      add_header Allow "GET, POST, HEAD" always;
      if ( $request_method !~ ^(GET)$ ) {

        return 405;
      }
      ngx_http_c_func_call 'getRoute';
    }

    location /ggl-direction/getHeartBeat {

      add_header Allow "GET, POST, HEAD" always;
      if ( $request_method !~ ^(GET)$ ) {

        return 405;
      }
      ngx_http_c_func_call 'getHeartBeat';
    }
  }

}
